#include <iostream>
#include "SocketServer.h"
#include <vector>

using namespace std;
using namespace exploringRPi;
#include <boost/algorithm/string.hpp>

int main(int argc, char *argv[]){
   string test[2][2];
   string temp_input="";
//int rec_string_count=0;
	cout << "Starting RPi Server Example" << endl;
   SocketServer server(54321);
   cout << "Listening for a connection..." << endl;
   server.listen();

  string msg = server.receive(1024);
   cout<<msg<<endl;

   msg = msg.substr(0, msg.length() - 1);

   //   4011#2#45121#4#

   vector<string> result;
   boost::split(result, msg, boost::is_any_of("#"));

      for (int i = 0; i < result.size(); i++)
          cout << result[i] << endl;


      cout<<result.size();

 /* while (msg[rec_string_count])
  {
	  if()
	  for(int i=0;i<2;i++)
	      {
	     	   for (int j=0;j<2;j++)
	     	   {

	     	   }
	      }


  }*/
 /*
   for(int i=0;i<2;i++)
   {
	   for (int j=0;j<2;j++)
	   {
		 //  server.listen();

		   test[i][j] = server.receive(1024);

		   cout<<test[i][j]<<"\t";
		   server.send(test[i][j]);
	   }

	   cout<<endl;
   }

  for(int i=0;i<2;i++)
    {
 	   for (int j=0;j<2;j++)
 	   {
 		 cout<<test[i][j]<<"\t";
  	   }
 	   cout<<endl;
    }

*/


   //string message("The Server says thanks!");
   //cout << "Sending back [" << message << "]" << endl;
   //server.send(message);
   cout << "End of RPi Server Example" << endl;
   return 0;
}
